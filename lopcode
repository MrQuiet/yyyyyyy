unsigned __int64 __fastcall sub_8BF4D0(__int64 a1, int a2, __int64 a3, __int64 a4, __int64 a5)
{
  unsigned int *v6; // r11
  __int64 v7; // rax
  __int64 v8; // r9
  unsigned int *v9; // rbp
  __int64 v10; // rax
  __int64 v11; // rdx
  unsigned __int64 v12; // r15
  unsigned int v13; // r12d
  char v14; // bl
  bool v15; // zf
  unsigned __int64 v16; // rax
  __int64 v17; // rdi
  __int64 v18; // rsi
  __int64 v19; // rcx
  _DWORD *v20; // rbx
  __int64 v21; // r14
  int v22; // r12d
  __int64 v23; // rax
  __int64 v24; // rdx
  __int64 v25; // r15
  __int64 v26; // r12
  unsigned int *v27; // r14
  unsigned __int64 v28; // rbp
  signed int v29; // eax
  _QWORD *v30; // rax
  int v31; // edx
  int v32; // edx
  double *v33; // rbp
  double v34; // xmm0_8
  _DWORD *v35; // rax
  int v36; // edx
  __int64 v37; // rax
  double v38; // xmm0_8
  double v39; // xmm1_8
  double v40; // xmm2_8
  bool v41; // al
  __int64 v42; // r10
  __int64 v43; // r8
  int v44; // eax
  signed int v45; // eax
  unsigned int v46; // r12d
  __int64 v47; // rdx
  __int64 v48; // r8
  signed int v49; // eax
  unsigned int v50; // r12d
  int v51; // edx
  int v52; // eax
  __int64 v53; // rax
  int v54; // eax
  unsigned int v55; // r14d
  signed int v56; // r12d
  __int64 v57; // r14
  __int64 v58; // rbx
  int v59; // eax
  int v60; // eax
  unsigned int v61; // esi
  unsigned int v62; // r12d
  __int64 *v63; // rsi
  __int64 v64; // rdx
  unsigned int v65; // ebp
  unsigned int v66; // eax
  unsigned int v67; // eax
  signed int v68; // r12d
  __int64 v69; // rcx
  __int64 v70; // rdx
  __int64 *v71; // rsi
  __int64 v72; // rcx
  __int64 v73; // rax
  __int64 v74; // r12
  int v75; // eax
  unsigned __int64 result; // rax
  __int64 v77; // rax
  __int64 v78; // rsi
  __int64 v79; // rax
  unsigned __int64 v80; // rax
  unsigned int v81; // r12d
  _DWORD *v82; // rbp
  int v83; // eax
  double v84; // xmm0_8
  int v85; // eax
  int v86; // r12d
  __int64 v87; // rbp
  int v88; // r14d
  int v89; // edi
  int v90; // edx
  _DWORD *v91; // r14
  int v92; // ebx
  __int64 v93; // rax
  _QWORD *v94; // r14
  int v95; // r12d
  int v96; // ebp
  int v97; // eax
  char *v98; // rdx
  __int64 v99; // rsi
  int v100; // edx
  unsigned int *v101; // rax
  unsigned int v102; // r12d
  signed int v103; // eax
  unsigned int v104; // r12d
  unsigned int v105; // eax
  signed int v106; // eax
  unsigned int v107; // r12d
  signed int v108; // eax
  unsigned int v109; // r12d
  unsigned int v110; // eax
  signed int v111; // r12d
  __int64 v112; // rdx
  __int64 v113; // rsi
  int v114; // eax
  __int64 v115; // rbx
  __int64 v116; // rcx
  __int64 v117; // rbx
  int v118; // edx
  __int64 v119; // rax
  signed int v120; // eax
  unsigned int v121; // r12d
  __int64 v122; // rsi
  int v123; // eax
  signed int v124; // eax
  unsigned int v125; // r12d
  int v126; // eax
  double v127; // xmm0_8
  __int64 v128; // rax
  int v129; // eax
  __int64 v130; // rax
  int v131; // edx
  __int64 v132; // rax
  double v133; // xmm0_8
  _QWORD *v134; // rbp
  __int64 v135; // r12
  unsigned __int64 v136; // rbx
  __int64 v137; // rdx
  __int64 v138; // rdi
  unsigned __int64 v139; // rsi
  unsigned __int64 v140; // rdx
  __int64 v141; // rdx
  __int64 *v142; // rax
  __int64 v143; // rcx
  unsigned __int64 v144; // rax
  __int64 v145; // r12
  __int64 v146; // rcx
  __int64 v147; // rdx
  double v148; // xmm0_8
  double v149; // xmm0_8
  double v150; // xmm0_8
  double v151; // xmm0_8
  double v152; // xmm0_8
  int v153; // eax
  int v154; // eax
  __int64 v155; // rdx
  __int64 v156; // [rsp+8h] [rbp-90h]
  __int64 v157; // [rsp+8h] [rbp-90h]
  __int64 v158; // [rsp+8h] [rbp-90h]
  __int64 v159; // [rsp+8h] [rbp-90h]
  __int64 v160; // [rsp+8h] [rbp-90h]
  __int64 v161; // [rsp+8h] [rbp-90h]
  unsigned int v162; // [rsp+8h] [rbp-90h]
  __int64 v163; // [rsp+8h] [rbp-90h]
  __int64 v164; // [rsp+8h] [rbp-90h]
  __int64 v165; // [rsp+8h] [rbp-90h]
  unsigned int v166; // [rsp+8h] [rbp-90h]
  __int64 v167; // [rsp+8h] [rbp-90h]
  __int64 v168; // [rsp+8h] [rbp-90h]
  unsigned __int64 v169; // [rsp+8h] [rbp-90h]
  unsigned int v170; // [rsp+8h] [rbp-90h]
  __int64 v171; // [rsp+8h] [rbp-90h]
  __int64 v172; // [rsp+8h] [rbp-90h]
  int v173; // [rsp+8h] [rbp-90h]
  __int64 v174; // [rsp+8h] [rbp-90h]
  double v175; // [rsp+8h] [rbp-90h]
  __int64 v176; // [rsp+8h] [rbp-90h]
  __int64 v177; // [rsp+10h] [rbp-88h]
  __int64 v178; // [rsp+18h] [rbp-80h]
  _DWORD *v180; // [rsp+30h] [rbp-68h]
  __int64 v181; // [rsp+30h] [rbp-68h]
  __int64 v182; // [rsp+30h] [rbp-68h]
  double v183; // [rsp+30h] [rbp-68h]
  __int64 v184; // [rsp+38h] [rbp-60h]
  __int64 v185; // [rsp+40h] [rbp-58h] BYREF
  int v186; // [rsp+48h] [rbp-50h]
  unsigned __int64 v187; // [rsp+58h] [rbp-40h]

  v6 = *(unsigned int **)(a1 + 48);
  v187 = __readfsqword(0x28u);
  v7 = *(_QWORD *)(a1 + 40);
LABEL_2:
  v8 = *(_QWORD *)(a1 + 24);
  v9 = v6;
  v178 = **(_QWORD **)(v7 + 8);
  v177 = *(_QWORD *)(*(_QWORD *)(v178 + 32) + 16LL);
  v10 = *(_QWORD *)(a1 + 32);
  while ( 1 )
  {
    LODWORD(v11) = *(_DWORD *)(v10 + 472);
    v12 = (unsigned __int64)(v9 + 1);
    v13 = *v9;
    if ( (_DWORD)v11 )
      sub_8AB680(a1, (unsigned int)"interrupt code %d", v11, a4, a5, v8);
    if ( *(int *)(v10 + 496) > 0 )
    {
      v156 = v8;
      sub_8ABA20(a1, v13 & 0x3F);
      v8 = v156;
    }
    v14 = *(_BYTE *)(a1 + 98);
    if ( (v14 & 0xC) == 0 )
      goto LABEL_17;
    v15 = (*(_DWORD *)(a1 + 104))-- == 1;
    if ( v15 )
      break;
    if ( (v14 & 4) != 0 )
    {
      v16 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = v12;
      goto LABEL_10;
    }
LABEL_17:
    a5 = (unsigned __int8)(v13 >> 6);
    a4 = 16 * a5;
    v20 = (_DWORD *)(v8 + 16 * a5);
    switch ( v13 & 0x3F )
    {
      case 0u:
        v85 = v13 >> 23;
        v86 = (v13 >> 14) & 0x1FF;
        if ( !v85 )
        {
          v85 = ((__int64)(*(_QWORD *)(a1 + 16) - (_QWORD)v20) >> 4) - 1;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16LL);
        }
        if ( !v86 )
        {
          v86 = v9[1];
          v12 = (unsigned __int64)(v9 + 2);
        }
        if ( v20[2] != 5 )
          goto LABEL_40;
        v87 = *(_QWORD *)v20;
        v88 = v85 + 50 * (v86 - 1);
        if ( v88 > *(_DWORD *)(*(_QWORD *)v20 + 56LL) )
        {
          v182 = v8;
          v173 = v85;
          sub_8BC7C0(a1, *(_QWORD *)v20, (unsigned int)v88);
          v8 = v182;
          v85 = v173;
        }
        if ( v85 <= 0 )
          goto LABEL_40;
        v165 = v8;
        v89 = v88 - v85;
        v90 = v88;
        v91 = &v20[4 * v85 + 2];
        do
        {
          v92 = v90 - 1;
          v93 = sub_8BC530(a1, v87);
          *(_QWORD *)v93 = *((_QWORD *)v91 - 1);
          *(_DWORD *)(v93 + 8) = *v91;
          if ( (int)*v91 > 3 && (*(_BYTE *)(*((_QWORD *)v91 - 1) + 9LL) & 3) != 0 && (*(_BYTE *)(v87 + 9) & 4) != 0 )
            sub_8AF210(a1, v87);
          v91 -= 4;
          v90 = v92;
        }
        while ( v92 != v89 );
        v8 = v165;
        v10 = *(_QWORD *)(a1 + 32);
        v9 = (unsigned int *)v12;
        continue;
      case 1u:
        v77 = v177 + 16LL * (v13 >> 14);
        goto LABEL_96;
      case 2u:
        v81 = v13 >> 23;
        v82 = (_DWORD *)(v8 + 16LL * v81);
        v83 = v82[2];
        if ( v83 == 4 )
        {
          v132 = *(_QWORD *)(*(_QWORD *)v82 + 16LL);
          if ( v132 < 0 )
          {
            v155 = *(_QWORD *)(*(_QWORD *)v82 + 16LL) & 1LL | ((unsigned __int64)v132 >> 1);
            v133 = (double)(int)v155 + (double)(int)v155;
          }
          else
          {
            v133 = (double)(int)v132;
          }
          *(double *)v20 = v133;
          v20[2] = 3;
          v10 = *(_QWORD *)(a1 + 32);
          v9 = (unsigned int *)v12;
          continue;
        }
        if ( v83 == 5 )
        {
          v164 = v8;
          v84 = (double)(int)sub_8BCCD0(*(_QWORD *)v82);
          goto LABEL_107;
        }
        *(_QWORD *)(a1 + 48) = v12;
        if ( !(unsigned int)sub_8BE650(a1, v8 + 16LL * v81, qword_DE2240, v20, 12LL) )
          sub_8AB800(a1, v82, "get length of");
        goto LABEL_88;
      case 3u:
        v80 = v8 + 16LL * (v13 >> 23);
        do
        {
          v80 -= 16LL;
          *(_DWORD *)(v80 + 24) = 0;
        }
        while ( (unsigned __int64)v20 <= v80 );
        goto LABEL_40;
      case 4u:
        v78 = *(_QWORD *)(v178 + 8LL * (v13 >> 23) + 40);
        v79 = *(_QWORD *)(v78 + 16);
        *(_QWORD *)v79 = *(_QWORD *)v20;
        *(_DWORD *)(v79 + 8) = v20[2];
        if ( (int)v20[2] <= 3 || (*(_BYTE *)(*(_QWORD *)v20 + 9LL) & 3) == 0 || (*(_BYTE *)(v78 + 9) & 4) == 0 )
          goto LABEL_40;
        v163 = v8;
        ++v9;
        sub_8AF190(a1);
        v10 = *(_QWORD *)(a1 + 32);
        v8 = v163;
        continue;
      case 5u:
        v77 = *(_QWORD *)(*(_QWORD *)(v178 + 8LL * (v13 >> 23) + 40) + 16LL);
        goto LABEL_96;
      case 6u:
        v74 = v13 >> 23;
        if ( (_DWORD)v74 )
          *(_QWORD *)(a1 + 16) = &v20[4 * v74];
        *(_QWORD *)(a1 + 48) = v12;
        v75 = sub_8AC420(a1, v8 + 16 * a5, 0xFFFFFFFFLL);
        if ( !v75 )
        {
          v134 = *(_QWORD **)(a1 + 40);
          v135 = *(v134 - 4);
          v136 = v134[1];
          if ( *(_QWORD *)(a1 + 152) )
          {
            sub_8AD840(a1, *(v134 - 5));
            v137 = *(v134 - 4);
            v138 = *(_QWORD *)(a1 + 40);
          }
          else
          {
            v138 = *(_QWORD *)(a1 + 40);
            v137 = *(v134 - 4);
          }
          v139 = *(_QWORD *)(a1 + 16);
          v140 = *v134 + v137 - v136;
          *(v134 - 5) = v140;
          *(_QWORD *)(a1 + 24) = v140;
          if ( v136 >= v139 )
          {
            v144 = 0LL;
          }
          else
          {
            v141 = v135;
            v142 = (__int64 *)v136;
            do
            {
              v143 = *v142;
              v142 += 2;
              v141 += 16LL;
              *(_QWORD *)(v141 - 16) = v143;
              a4 = *((unsigned int *)v142 - 2);
              *(_DWORD *)(v141 - 8) = a4;
            }
            while ( (unsigned __int64)v142 < v139 );
            v144 = ((~v136 + v139) & 0xFFFFFFFFFFFFFFF0LL) + 16;
          }
          v6 = *(unsigned int **)(a1 + 48);
          v145 = v144 + v135;
          v7 = v138 - 40;
          *(_QWORD *)(a1 + 16) = v145;
          *(v134 - 3) = v145;
          ++*((_DWORD *)v134 - 1);
          *(v134 - 2) = v6;
          *(_QWORD *)(a1 + 40) = v138 - 40;
          goto LABEL_2;
        }
        if ( v75 != 1 )
          goto LABEL_93;
        goto LABEL_88;
      case 7u:
        v63 = &v185;
        v72 = v8 + 16 * a5;
        v64 = v177 + 16LL * (v13 >> 14);
        v73 = *(_QWORD *)(v178 + 24);
        v186 = 5;
        *(_QWORD *)(a1 + 48) = v12;
        v185 = v73;
        goto LABEL_87;
      case 8u:
        *(_QWORD *)(a1 + 48) = v12;
        v67 = v13 >> 14;
        if ( (v13 & 0x400000) != 0 )
        {
          v68 = v13 >> 23;
          v69 = v177 + 16LL * (unsigned __int8)v67;
          if ( (v68 & 0x100) != 0 )
          {
LABEL_84:
            v70 = v177 + 16LL * (unsigned __int8)v68;
            goto LABEL_85;
          }
        }
        else
        {
          v68 = v13 >> 23;
          v69 = v8 + 16LL * (v67 & 0x1FF);
          if ( (v68 & 0x100) != 0 )
            goto LABEL_84;
        }
        v70 = v8 + 16LL * v68;
LABEL_85:
        v71 = (__int64 *)(v8 + 16 * a5);
LABEL_172:
        ++v9;
        sub_8BEE00(a1, v71, v70, v69);
        v8 = *(_QWORD *)(a1 + 24);
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 9u:
        v65 = sub_8B33E0((v13 >> 14) & 0x1FF);
        v66 = sub_8B33E0(v13 >> 23);
        *(_QWORD *)v20 = sub_8BC110(a1, v66, v65);
        v10 = *(_QWORD *)(a1 + 32);
        v20[2] = 5;
        *(_QWORD *)(a1 + 48) = v12;
        if ( *(_QWORD *)(v10 + 120) >= *(_QWORD *)(v10 + 112) )
        {
          sub_8AEF80(a1);
          v10 = *(_QWORD *)(a1 + 32);
        }
        v8 = *(_QWORD *)(a1 + 24);
        v9 = (unsigned int *)v12;
        continue;
      case 0xAu:
        v61 = v13;
        v62 = v13 >> 14;
        v63 = (__int64 *)(v8 + 16LL * (v61 >> 23));
        *((_QWORD *)v20 + 2) = *v63;
        v20[6] = *((_DWORD *)v63 + 2);
        *(_QWORD *)(a1 + 48) = v12;
        if ( (v62 & 0x100) != 0 )
          v64 = v177 + 16LL * (unsigned __int8)v62;
        else
          v64 = v8 + 16LL * (v62 & 0x1FF);
        goto LABEL_145;
      case 0xBu:
        *(_QWORD *)(a1 + 48) = v12;
        v110 = v13 >> 14;
        if ( (v13 & 0x400000) != 0 )
        {
          v111 = v13 >> 23;
          v112 = v177 + 16LL * (unsigned __int8)v110;
          if ( (v111 & 0x100) != 0 )
          {
LABEL_162:
            v113 = v177 + 16LL * (unsigned __int8)v111;
            goto LABEL_163;
          }
        }
        else
        {
          v111 = v13 >> 23;
          v112 = v8 + 16LL * (v110 & 0x1FF);
          if ( (v111 & 0x100) != 0 )
            goto LABEL_162;
        }
        v113 = v8 + 16LL * v111;
LABEL_163:
        v166 = a5;
        v114 = sub_8BF050(a1, v113, v112);
        a5 = v166;
        if ( v114 == v166 )
          goto LABEL_76;
        goto LABEL_177;
      case 0xCu:
        v20[2] = 1;
        *v20 = v13 >> 23;
        if ( (v13 & 0x7FC000) == 0 )
          goto LABEL_40;
        v9 += 2;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0xDu:
        v108 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v109 = v13 >> 14;
          v47 = v177 + 16LL * (unsigned __int8)v108;
          if ( (v109 & 0x100) != 0 )
          {
LABEL_154:
            a4 = v177 + 16LL * (unsigned __int8)v109;
            goto LABEL_155;
          }
        }
        else
        {
          v109 = v13 >> 14;
          v47 = v8 + 16LL * v108;
          if ( (v109 & 0x100) != 0 )
            goto LABEL_154;
        }
        a4 = v8 + 16LL * (v109 & 0x1FF);
LABEL_155:
        if ( *(_DWORD *)(v47 + 8) != 3 || *(_DWORD *)(a4 + 8) != 3 )
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 5LL;
          goto LABEL_135;
        }
        ++v9;
        v150 = *(double *)v47 + *(double *)a4;
        v20[2] = 3;
        *(double *)v20 = v150;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0xEu:
        v106 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v107 = v13 >> 14;
          v47 = v177 + 16LL * (unsigned __int8)v106;
          if ( (v107 & 0x100) != 0 )
          {
LABEL_148:
            a4 = v177 + 16LL * (unsigned __int8)v107;
            goto LABEL_149;
          }
        }
        else
        {
          v107 = v13 >> 14;
          v47 = v8 + 16LL * v106;
          if ( (v107 & 0x100) != 0 )
            goto LABEL_148;
        }
        a4 = v8 + 16LL * (v107 & 0x1FF);
LABEL_149:
        if ( *(_DWORD *)(v47 + 8) != 3 || *(_DWORD *)(a4 + 8) != 3 )
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 7LL;
          goto LABEL_135;
        }
        ++v9;
        v151 = *(double *)v47 * *(double *)a4;
        v20[2] = 3;
        *(double *)v20 = v151;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0xFu:
        *(_QWORD *)(a1 + 48) = v12;
        v105 = v13 >> 14;
        if ( (v13 & 0x400000) != 0 )
          v64 = v177 + 16LL * (unsigned __int8)v105;
        else
          v64 = v8 + 16LL * (v105 & 0x1FF);
        v63 = (__int64 *)(v8 + 16LL * (v13 >> 23));
LABEL_145:
        v72 = v8 + 16 * a5;
LABEL_87:
        sub_8BEC60(a1, v63, v64, v72);
        goto LABEL_88;
      case 0x10u:
        v103 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v104 = v13 >> 14;
          v47 = v177 + 16LL * (unsigned __int8)v103;
          if ( (v104 & 0x100) != 0 )
          {
LABEL_138:
            a4 = v177 + 16LL * (unsigned __int8)v104;
            goto LABEL_139;
          }
        }
        else
        {
          v104 = v13 >> 14;
          v47 = v8 + 16LL * v103;
          if ( (v104 & 0x100) != 0 )
            goto LABEL_138;
        }
        a4 = v8 + 16LL * (v104 & 0x1FF);
LABEL_139:
        if ( *(_DWORD *)(v47 + 8) != 3 || *(_DWORD *)(a4 + 8) != 3 )
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 10LL;
          goto LABEL_135;
        }
        v164 = v8;
        v84 = pow(*(double *)v47, *(double *)a4);
LABEL_107:
        *(double *)v20 = v84;
        v20[2] = 3;
        v10 = *(_QWORD *)(a1 + 32);
        v9 = (unsigned int *)v12;
        v8 = v164;
        continue;
      case 0x11u:
        v102 = v13 >> 23;
        v47 = v8 + 16LL * v102;
        if ( *(_DWORD *)(v47 + 8) != 3 )
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 11LL;
          a4 = v8 + 16LL * v102;
          goto LABEL_135;
        }
        v127 = *(double *)v47;
        ++v9;
        v20[2] = 3;
        *(double *)v20 = -v127;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0x12u:
        v100 = 1;
        v101 = (unsigned int *)(v8 + 16LL * (v13 >> 23));
        a4 = v101[2];
        if ( (_DWORD)a4 && (LOBYTE(v100) = 0, (_DWORD)a4 == 1) )
        {
          a5 = *v101;
          v20[2] = 1;
          ++v9;
          *v20 = a5 == 0;
          v10 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          *v20 = v100;
          v20[2] = 1;
          ++v9;
          v10 = *(_QWORD *)(a1 + 32);
        }
        continue;
      case 0x13u:
        v71 = &v185;
        v69 = v8 + 16 * a5;
        v70 = v177 + 16LL * (v13 >> 14);
        v119 = *(_QWORD *)(v178 + 24);
        v186 = 5;
        *(_QWORD *)(a1 + 48) = v12;
        v185 = v119;
        goto LABEL_172;
      case 0x14u:
        v115 = v13 >> 23;
        *(_QWORD *)(a1 + 48) = v12;
        v167 = 16 * a5;
        sub_8BF230(a1, ((v13 >> 14) & 0x1FF) - (unsigned int)v115 + 1);
        v10 = *(_QWORD *)(a1 + 32);
        v116 = v167;
        if ( *(_QWORD *)(v10 + 120) >= *(_QWORD *)(v10 + 112) )
        {
          sub_8AEF80(a1);
          v10 = *(_QWORD *)(a1 + 32);
          v116 = v167;
        }
        v8 = *(_QWORD *)(a1 + 24);
        v117 = 16 * v115;
        ++v9;
        a4 = v8 + v116;
        v118 = *(_DWORD *)(v8 + v117 + 8);
        *(_QWORD *)a4 = *(_QWORD *)(v8 + v117);
        *(_DWORD *)(a4 + 8) = v118;
        continue;
      case 0x15u:
        v77 = v8 + 16LL * (v13 >> 23);
LABEL_96:
        ++v9;
        *(_QWORD *)v20 = *(_QWORD *)v77;
        v20[2] = *(_DWORD *)(v77 + 8);
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0x16u:
        v159 = v8;
        goto LABEL_166;
      case 0x17u:
        v168 = v8;
        ++v9;
        sub_8AD840(a1, v8 + 16 * a5);
        v10 = *(_QWORD *)(a1 + 32);
        v8 = v168;
        continue;
      case 0x18u:
        v120 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v121 = v13 >> 14;
          v122 = v177 + 16LL * (unsigned __int8)v120;
          if ( (v121 & 0x100) != 0 )
          {
LABEL_175:
            *(_QWORD *)(a1 + 48) = v12;
            v123 = 0;
            if ( *(_DWORD *)(v122 + 8) != *(_DWORD *)(v177 + 16LL * (unsigned __int8)v121 + 8) )
              goto LABEL_176;
            goto LABEL_198;
          }
        }
        else
        {
          v121 = v13 >> 14;
          v122 = v8 + 16LL * v120;
          if ( (v121 & 0x100) != 0 )
            goto LABEL_175;
        }
        v123 = 0;
        *(_QWORD *)(a1 + 48) = v12;
        if ( *(_DWORD *)(v122 + 8) != *(_DWORD *)(v8 + 16LL * (v121 & 0x1FF) + 8) )
          goto LABEL_176;
LABEL_198:
        v170 = a5;
        v126 = sub_8BF110(a1);
        a5 = v170;
        v123 = v126 != 0;
LABEL_176:
        if ( v123 != (_DWORD)a5 )
          goto LABEL_177;
        goto LABEL_76;
      case 0x19u:
        v124 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v125 = v13 >> 14;
          v47 = v177 + 16LL * (unsigned __int8)v124;
          if ( (v125 & 0x100) != 0 )
          {
LABEL_181:
            a4 = v177 + 16LL * (unsigned __int8)v125;
            goto LABEL_182;
          }
        }
        else
        {
          v125 = v13 >> 14;
          v47 = v8 + 16LL * v124;
          if ( (v125 & 0x100) != 0 )
            goto LABEL_181;
        }
        a4 = v8 + 16LL * (v125 & 0x1FF);
LABEL_182:
        if ( *(_DWORD *)(v47 + 8) == 3 && *(_DWORD *)(a4 + 8) == 3 )
        {
          v184 = v8;
          ++v9;
          v183 = *(double *)v47;
          v175 = *(double *)a4;
          v152 = floor(*(double *)v47 / *(double *)a4);
          v20[2] = 3;
          v8 = v184;
          *(double *)v20 = v183 - v175 * v152;
          v10 = *(_QWORD *)(a1 + 32);
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 9LL;
LABEL_135:
          sub_8BE830(a1, v20, v47, a4, v48);
LABEL_88:
          v8 = *(_QWORD *)(a1 + 24);
          v10 = *(_QWORD *)(a1 + 32);
          v9 = (unsigned int *)v12;
        }
        continue;
      case 0x1Au:
        *(_QWORD *)(a1 + 48) = v12;
        v55 = v13 >> 14;
        if ( ((v13 >> 14) & 0x100) != 0 )
        {
          v56 = v13 >> 23;
          v57 = v177 + 16LL * (unsigned __int8)v55;
          if ( (v56 & 0x100) != 0 )
          {
LABEL_71:
            v58 = v177 + 16LL * (unsigned __int8)v56;
            v59 = *(_DWORD *)(v58 + 8);
            if ( v59 != *(_DWORD *)(v57 + 8) )
              goto LABEL_216;
            goto LABEL_72;
          }
        }
        else
        {
          v56 = v13 >> 23;
          v57 = v8 + 16LL * (v55 & 0x1FF);
          if ( (v56 & 0x100) != 0 )
            goto LABEL_71;
        }
        v58 = v8 + 16LL * v56;
        v59 = *(_DWORD *)(v58 + 8);
        if ( v59 != *(_DWORD *)(v57 + 8) )
          goto LABEL_216;
LABEL_72:
        if ( v59 == 3 )
        {
          v60 = *(double *)v57 >= *(double *)v58;
        }
        else
        {
          v162 = a5;
          if ( v59 == 4 )
          {
            v153 = sub_8BE4F0(*(_QWORD *)v58, *(_QWORD *)v57);
            a5 = v162;
            v60 = v153 <= 0;
          }
          else
          {
            v60 = sub_8BE700(a1, v58, v57, 14LL);
            a5 = v162;
            if ( v60 == -1 )
            {
              v154 = sub_8BE700(a1, v57, v58, 13LL);
              a5 = v162;
              if ( v154 == -1 )
LABEL_216:
                sub_8AB9A0(a1, v58, v57);
              v60 = v154 == 0;
            }
          }
        }
        if ( (_DWORD)a5 == v60 )
        {
LABEL_76:
          v12 = v12 + 4LL * (v9[1] >> 14) - 524284;
          pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
          pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        }
LABEL_177:
        v8 = *(_QWORD *)(a1 + 24);
        v9 = (unsigned int *)(v12 + 4);
        v10 = *(_QWORD *)(a1 + 32);
        break;
      case 0x1Bu:
        v51 = v20[2];
        v52 = 1;
        if ( v51 )
        {
          LOBYTE(v52) = 0;
          if ( v51 == 1 )
            v52 = *v20 == 0;
        }
        if ( v52 == ((v13 >> 14) & 0x1FF) )
          goto LABEL_28;
        v160 = v8;
        goto LABEL_36;
      case 0x1Cu:
        v49 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v50 = v13 >> 14;
          v47 = v177 + 16LL * (unsigned __int8)v49;
          if ( (v50 & 0x100) != 0 )
          {
LABEL_56:
            a4 = v177 + 16LL * (unsigned __int8)v50;
            goto LABEL_57;
          }
        }
        else
        {
          v50 = v13 >> 14;
          v47 = v8 + 16LL * v49;
          if ( (v50 & 0x100) != 0 )
            goto LABEL_56;
        }
        a4 = v8 + 16LL * (v50 & 0x1FF);
LABEL_57:
        if ( *(_DWORD *)(v47 + 8) != 3 || *(_DWORD *)(a4 + 8) != 3 )
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 8LL;
          goto LABEL_135;
        }
        ++v9;
        v149 = *(double *)v47 / *(double *)a4;
        v20[2] = 3;
        *(double *)v20 = v149;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0x1Du:
        v53 = v13 >> 23;
        if ( (_DWORD)v53 )
          *(_QWORD *)(a1 + 16) = &v20[4 * v53];
        *(_QWORD *)(a1 + 48) = v12;
        v54 = sub_8AC420(a1, v8 + 16 * a5, ((v13 >> 14) & 0x1FF) - 1);
        if ( !v54 )
        {
          ++a2;
          v7 = *(_QWORD *)(a1 + 40);
          v6 = *(unsigned int **)(a1 + 48);
          goto LABEL_2;
        }
        if ( v54 != 1 )
          goto LABEL_93;
        if ( ((v13 >> 14) & 0x1FF) != 0 )
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16LL);
        goto LABEL_88;
      case 0x1Eu:
        v45 = v13 >> 23;
        if ( (v13 & 0x80000000) != 0 )
        {
          v46 = v13 >> 14;
          v47 = v177 + 16LL * (unsigned __int8)v45;
          if ( (v46 & 0x100) != 0 )
          {
LABEL_50:
            a4 = v177 + 16LL * (unsigned __int8)v46;
            goto LABEL_51;
          }
        }
        else
        {
          v46 = v13 >> 14;
          v47 = v8 + 16LL * v45;
          if ( (v46 & 0x100) != 0 )
            goto LABEL_50;
        }
        a4 = v8 + 16LL * (v46 & 0x1FF);
LABEL_51:
        if ( *(_DWORD *)(v47 + 8) != 3 || *(_DWORD *)(a4 + 8) != 3 )
        {
          *(_QWORD *)(a1 + 48) = v12;
          v48 = 6LL;
          goto LABEL_135;
        }
        ++v9;
        v148 = *(double *)v47 - *(double *)a4;
        v20[2] = 3;
        *(double *)v20 = v148;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0x1Fu:
        v42 = v8 + 16 * a5;
        v43 = v13 >> 23;
        if ( (_DWORD)v43 )
          *(_QWORD *)(a1 + 16) = v42 + 16 * v43 - 16;
        if ( *(_QWORD *)(a1 + 152) )
        {
          v161 = v42;
          sub_8AD840(a1, v8);
          v42 = v161;
        }
        *(_QWORD *)(a1 + 48) = v12;
        v44 = sub_8AC2E0(a1, v42);
        if ( !--a2 )
          goto LABEL_93;
        v15 = v44 == 0;
        v7 = *(_QWORD *)(a1 + 40);
        v6 = *(unsigned int **)(a1 + 48);
        if ( !v15 )
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v7 + 16);
        goto LABEL_2;
      case 0x20u:
        v38 = *((double *)v20 + 4);
        v39 = *(double *)v20 + v38;
        v40 = *((double *)v20 + 2);
        if ( v38 <= 0.0 )
          v41 = v39 >= v40;
        else
          v41 = v40 >= v39;
        if ( !v41 )
          goto LABEL_40;
        v181 = v8;
        v9 = (unsigned int *)(v12 + 4LL * (v13 >> 14) - 524284);
        pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        v20[2] = 3;
        v20[14] = 3;
        v8 = v181;
        *(double *)v20 = v39;
        *((double *)v20 + 6) = v39;
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0x21u:
        a4 = 1LL;
        v35 = (_DWORD *)(v8 + 16LL * (v13 >> 23));
        v36 = v35[2];
        if ( v36 )
        {
          LOBYTE(a4) = 0;
          if ( v36 == 1 )
            a4 = *v35 == 0;
        }
        if ( (_DWORD)a4 == ((v13 >> 14) & 0x1FF) )
          goto LABEL_28;
        v37 = *(_QWORD *)v35;
        v160 = v8;
        v20[2] = v36;
        *(_QWORD *)v20 = v37;
        goto LABEL_36;
      case 0x22u:
        v32 = v20[2];
        v33 = (double *)(v20 + 8);
        *(_QWORD *)(a1 + 48) = v12;
        if ( v32 != 3 )
        {
          if ( v32 != 4 || (v171 = v8, v128 = sub_8BE7C0(v8 + 16 * a5, v8 + 16 * a5), v8 = v171, !v128) )
            sub_8AB680(a1, (unsigned int)"'for' initial value must be a number", v32, a4, a5, v8);
        }
        v129 = v20[6];
        if ( v129 != 3 )
        {
          if ( v129 != 4 || (v172 = v8, v130 = sub_8BE7C0(v20 + 4, v20 + 4), v8 = v172, !v130) )
            sub_8AB680(a1, (unsigned int)"'for' limit must be a number", v32, a4, a5, v8);
        }
        v131 = v20[10];
        if ( v131 != 3 )
        {
          if ( v131 != 4 || (v176 = v8, v33 = (double *)sub_8BE7C0(v20 + 8, v20 + 8), v8 = v176, !v33) )
            sub_8AB680(a1, (unsigned int)word_DE2F8A, v131, a4, a5, v8);
        }
        v159 = v8;
        v34 = *(double *)v20 - *v33;
        v20[2] = 3;
        *(double *)v20 = v34;
LABEL_166:
        v9 = (unsigned int *)(v12 + 4LL * (v13 >> 14) - 524284);
        pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        v10 = *(_QWORD *)(a1 + 32);
        v8 = v159;
        continue;
      case 0x23u:
        v158 = 16 * a5;
        *((_QWORD *)v20 + 10) = *((_QWORD *)v20 + 4);
        v20[22] = v20[10];
        *((_QWORD *)v20 + 8) = *((_QWORD *)v20 + 2);
        v20[18] = v20[6];
        *((_QWORD *)v20 + 6) = *(_QWORD *)v20;
        v20[14] = v20[2];
        *(_QWORD *)(a1 + 48) = v12;
        *(_QWORD *)(a1 + 16) = v20 + 24;
        sub_8ACA60(a1, v20 + 12, (v13 >> 14) & 0x1FF);
        v8 = *(_QWORD *)(a1 + 24);
        a4 = v158;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16LL);
        v30 = (_QWORD *)(v8 + v158 + 48);
        v31 = *(_DWORD *)(v8 + v158 + 56);
        if ( !v31 )
          goto LABEL_28;
        v146 = *v30;
        v160 = v8;
        *((_DWORD *)v30 - 2) = v31;
        *(v30 - 2) = v146;
LABEL_36:
        v12 = v12 + 4LL * (v9[1] >> 14) - 524284;
        pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a1 + 32) + 432LL));
        v8 = v160;
LABEL_28:
        v9 = (unsigned int *)(v12 + 4);
        v10 = *(_QWORD *)(a1 + 32);
        continue;
      case 0x24u:
        v157 = v8;
        v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v178 + 32) + 32LL) + 8LL * (v13 >> 14));
        v22 = *(unsigned __int8 *)(v21 + 112);
        v23 = sub_8AD5F0(a1, *(unsigned __int8 *)(v21 + 112), *(_QWORD *)(v178 + 24));
        a4 = v23;
        *(_QWORD *)(v23 + 32) = v21;
        if ( v22 )
        {
          v180 = v9 + 1;
          v25 = v23;
          v26 = 4LL * (unsigned int)(v22 - 1) + 4;
          v27 = v9;
          v28 = 0LL;
          while ( 1 )
          {
            v29 = v27[v28 / 4 + 1] >> 23;
            if ( (v27[v28 / 4 + 1] & 0x3F) == 5 )
            {
              *(_QWORD *)(v25 + 2 * v28 + 40) = *(_QWORD *)(v178 + 8LL * v29 + 40);
              v28 += 4LL;
              if ( v28 == v26 )
                goto LABEL_23;
            }
            else
            {
              *(_QWORD *)(v25 + 2 * v28 + 40) = sub_8AD700(a1, v157 + 16LL * v29, v24, a4);
              v28 += 4LL;
              if ( v28 == v26 )
              {
LABEL_23:
                a4 = v25;
                v9 = &v180[v28 / 4];
                goto LABEL_24;
              }
            }
          }
        }
        ++v9;
LABEL_24:
        *(_QWORD *)v20 = a4;
        v10 = *(_QWORD *)(a1 + 32);
        v20[2] = 6;
        *(_QWORD *)(a1 + 48) = v9;
        if ( *(_QWORD *)(v10 + 120) >= *(_QWORD *)(v10 + 112) )
        {
          sub_8AEF80(a1);
          v10 = *(_QWORD *)(a1 + 32);
        }
        v8 = *(_QWORD *)(a1 + 24);
        continue;
      case 0x25u:
        v94 = *(_QWORD **)(a1 + 40);
        v95 = (v13 >> 23) - 1;
        v96 = ((__int64)(*v94 - v94[1]) >> 4) - *(unsigned __int8 *)(*(_QWORD *)(v178 + 32) + 113LL) - 1;
        if ( v95 == -1 )
        {
          v147 = *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 48) = v12;
          if ( v147 <= 16 * v96 )
          {
            v174 = 16 * a5;
            sub_8ABF50(a1, (unsigned int)v96);
            a4 = v174;
          }
          v8 = *(_QWORD *)(a1 + 24);
          v95 = v96;
          v20 = (_DWORD *)(v8 + a4);
          *(_QWORD *)(a1 + 16) = v8 + a4 + 16LL * v96;
        }
        if ( v95 > 0 )
        {
          v97 = 0;
          a4 = -16LL * v96 - (_QWORD)v20;
          do
          {
            if ( v97 < v96 )
            {
              v98 = (char *)v20 + a4 + *v94;
              v99 = *(_QWORD *)v98;
              LODWORD(v98) = *((_DWORD *)v98 + 2);
              *(_QWORD *)v20 = v99;
              v20[2] = (_DWORD)v98;
            }
            else
            {
              v20[2] = 0;
            }
            ++v97;
            v20 += 4;
          }
          while ( v97 != v95 );
        }
LABEL_40:
        v10 = *(_QWORD *)(a1 + 32);
        v9 = (unsigned int *)v12;
        continue;
      default:
        sub_8AB680(a1, (unsigned int)"unknown opcode", v11, a4, a5, v8);
    }
  }
  v16 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  if ( v14 == 4
    || (v169 = v16,
        *(_DWORD *)(a1 + 104) = *(_DWORD *)(a1 + 100),
        sub_8AC190(a1, 3LL, 0xFFFFFFFFLL, a4, a5, v8),
        v16 = v169,
        (v14 & 4) != 0) )
  {
LABEL_10:
    v11 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8LL) + 32LL);
    v17 = *(_QWORD *)(v11 + 24);
    v18 = *(_QWORD *)(v11 + 40);
    v19 = (unsigned int)((__int64)(v12 - v17) >> 2) - 1;
    if ( v18 )
    {
      v11 = *(unsigned int *)(v18 + 4LL * (int)v19);
      if ( v12 <= v16
        || (unsigned int)((__int64)(v12 - v17) >> 2) == 1
        || (_DWORD)v11 != *(_DWORD *)(v18 + 4LL * (int)((__int64)(v16 - v17) >> 2) - 4) )
      {
        goto LABEL_14;
      }
    }
    else if ( v12 <= v16 || (unsigned int)((__int64)(v12 - v17) >> 2) == 1 )
    {
      v11 = 0LL;
LABEL_14:
      sub_8AC190(a1, 2LL, v11, v19, a5, v8);
    }
    if ( *(_BYTE *)(a1 + 10) == 1 )
      goto LABEL_189;
    goto LABEL_16;
  }
  if ( *(_BYTE *)(a1 + 10) != 1 )
  {
LABEL_16:
    v8 = *(_QWORD *)(a1 + 24);
    goto LABEL_17;
  }
LABEL_189:
  *(_QWORD *)(a1 + 48) = v9;
LABEL_93:
  result = __readfsqword(0x28u) ^ v187;
  if ( result )
    sub_798CE0();
  return result;
}
